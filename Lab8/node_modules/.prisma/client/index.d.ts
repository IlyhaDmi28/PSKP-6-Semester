
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model commits
 * 
 */
export type commits = $Result.DefaultSelection<Prisma.$commitsPayload>
/**
 * Model repos
 * 
 */
export type repos = $Result.DefaultSelection<Prisma.$reposPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Commits
 * const commits = await prisma.commits.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Commits
   * const commits = await prisma.commits.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.commits`: Exposes CRUD operations for the **commits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commits
    * const commits = await prisma.commits.findMany()
    * ```
    */
  get commits(): Prisma.commitsDelegate<ExtArgs>;

  /**
   * `prisma.repos`: Exposes CRUD operations for the **repos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Repos
    * const repos = await prisma.repos.findMany()
    * ```
    */
  get repos(): Prisma.reposDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    commits: 'commits',
    repos: 'repos',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'commits' | 'repos' | 'users'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      commits: {
        payload: Prisma.$commitsPayload<ExtArgs>
        fields: Prisma.commitsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.commitsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.commitsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload>
          }
          findFirst: {
            args: Prisma.commitsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.commitsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload>
          }
          findMany: {
            args: Prisma.commitsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload>[]
          }
          create: {
            args: Prisma.commitsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload>
          }
          createMany: {
            args: Prisma.commitsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.commitsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload>
          }
          update: {
            args: Prisma.commitsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload>
          }
          deleteMany: {
            args: Prisma.commitsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.commitsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.commitsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$commitsPayload>
          }
          aggregate: {
            args: Prisma.CommitsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommits>
          }
          groupBy: {
            args: Prisma.commitsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommitsGroupByOutputType>[]
          }
          count: {
            args: Prisma.commitsCountArgs<ExtArgs>,
            result: $Utils.Optional<CommitsCountAggregateOutputType> | number
          }
        }
      }
      repos: {
        payload: Prisma.$reposPayload<ExtArgs>
        fields: Prisma.reposFieldRefs
        operations: {
          findUnique: {
            args: Prisma.reposFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.reposFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload>
          }
          findFirst: {
            args: Prisma.reposFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.reposFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload>
          }
          findMany: {
            args: Prisma.reposFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload>[]
          }
          create: {
            args: Prisma.reposCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload>
          }
          createMany: {
            args: Prisma.reposCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.reposDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload>
          }
          update: {
            args: Prisma.reposUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload>
          }
          deleteMany: {
            args: Prisma.reposDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.reposUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.reposUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$reposPayload>
          }
          aggregate: {
            args: Prisma.ReposAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRepos>
          }
          groupBy: {
            args: Prisma.reposGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReposGroupByOutputType>[]
          }
          count: {
            args: Prisma.reposCountArgs<ExtArgs>,
            result: $Utils.Optional<ReposCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ReposCountOutputType
   */

  export type ReposCountOutputType = {
    commits: number
  }

  export type ReposCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commits?: boolean | ReposCountOutputTypeCountCommitsArgs
  }

  // Custom InputTypes

  /**
   * ReposCountOutputType without action
   */
  export type ReposCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReposCountOutputType
     */
    select?: ReposCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReposCountOutputType without action
   */
  export type ReposCountOutputTypeCountCommitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commitsWhereInput
  }



  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    repos: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repos?: boolean | UsersCountOutputTypeCountReposArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reposWhereInput
  }



  /**
   * Models
   */

  /**
   * Model commits
   */

  export type AggregateCommits = {
    _count: CommitsCountAggregateOutputType | null
    _avg: CommitsAvgAggregateOutputType | null
    _sum: CommitsSumAggregateOutputType | null
    _min: CommitsMinAggregateOutputType | null
    _max: CommitsMaxAggregateOutputType | null
  }

  export type CommitsAvgAggregateOutputType = {
    id: number | null
    repoid: number | null
  }

  export type CommitsSumAggregateOutputType = {
    id: number | null
    repoid: number | null
  }

  export type CommitsMinAggregateOutputType = {
    id: number | null
    message: string | null
    repoid: number | null
  }

  export type CommitsMaxAggregateOutputType = {
    id: number | null
    message: string | null
    repoid: number | null
  }

  export type CommitsCountAggregateOutputType = {
    id: number
    message: number
    repoid: number
    _all: number
  }


  export type CommitsAvgAggregateInputType = {
    id?: true
    repoid?: true
  }

  export type CommitsSumAggregateInputType = {
    id?: true
    repoid?: true
  }

  export type CommitsMinAggregateInputType = {
    id?: true
    message?: true
    repoid?: true
  }

  export type CommitsMaxAggregateInputType = {
    id?: true
    message?: true
    repoid?: true
  }

  export type CommitsCountAggregateInputType = {
    id?: true
    message?: true
    repoid?: true
    _all?: true
  }

  export type CommitsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commits to aggregate.
     */
    where?: commitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commits to fetch.
     */
    orderBy?: commitsOrderByWithRelationInput | commitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: commitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned commits
    **/
    _count?: true | CommitsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommitsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommitsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommitsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommitsMaxAggregateInputType
  }

  export type GetCommitsAggregateType<T extends CommitsAggregateArgs> = {
        [P in keyof T & keyof AggregateCommits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommits[P]>
      : GetScalarType<T[P], AggregateCommits[P]>
  }




  export type commitsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: commitsWhereInput
    orderBy?: commitsOrderByWithAggregationInput | commitsOrderByWithAggregationInput[]
    by: CommitsScalarFieldEnum[] | CommitsScalarFieldEnum
    having?: commitsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommitsCountAggregateInputType | true
    _avg?: CommitsAvgAggregateInputType
    _sum?: CommitsSumAggregateInputType
    _min?: CommitsMinAggregateInputType
    _max?: CommitsMaxAggregateInputType
  }

  export type CommitsGroupByOutputType = {
    id: number
    message: string | null
    repoid: number
    _count: CommitsCountAggregateOutputType | null
    _avg: CommitsAvgAggregateOutputType | null
    _sum: CommitsSumAggregateOutputType | null
    _min: CommitsMinAggregateOutputType | null
    _max: CommitsMaxAggregateOutputType | null
  }

  type GetCommitsGroupByPayload<T extends commitsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommitsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommitsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommitsGroupByOutputType[P]>
            : GetScalarType<T[P], CommitsGroupByOutputType[P]>
        }
      >
    >


  export type commitsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    repoid?: boolean
    repos?: boolean | reposDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commits"]>

  export type commitsSelectScalar = {
    id?: boolean
    message?: boolean
    repoid?: boolean
  }

  export type commitsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repos?: boolean | reposDefaultArgs<ExtArgs>
  }


  export type $commitsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "commits"
    objects: {
      repos: Prisma.$reposPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      message: string | null
      repoid: number
    }, ExtArgs["result"]["commits"]>
    composites: {}
  }


  type commitsGetPayload<S extends boolean | null | undefined | commitsDefaultArgs> = $Result.GetResult<Prisma.$commitsPayload, S>

  type commitsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<commitsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommitsCountAggregateInputType | true
    }

  export interface commitsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['commits'], meta: { name: 'commits' } }
    /**
     * Find zero or one Commits that matches the filter.
     * @param {commitsFindUniqueArgs} args - Arguments to find a Commits
     * @example
     * // Get one Commits
     * const commits = await prisma.commits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commitsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, commitsFindUniqueArgs<ExtArgs>>
    ): Prisma__commitsClient<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Commits that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {commitsFindUniqueOrThrowArgs} args - Arguments to find a Commits
     * @example
     * // Get one Commits
     * const commits = await prisma.commits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commitsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commitsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__commitsClient<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Commits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commitsFindFirstArgs} args - Arguments to find a Commits
     * @example
     * // Get one Commits
     * const commits = await prisma.commits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commitsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, commitsFindFirstArgs<ExtArgs>>
    ): Prisma__commitsClient<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Commits that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commitsFindFirstOrThrowArgs} args - Arguments to find a Commits
     * @example
     * // Get one Commits
     * const commits = await prisma.commits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commitsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, commitsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__commitsClient<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Commits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commitsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commits
     * const commits = await prisma.commits.findMany()
     * 
     * // Get first 10 Commits
     * const commits = await prisma.commits.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commitsWithIdOnly = await prisma.commits.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commitsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commitsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Commits.
     * @param {commitsCreateArgs} args - Arguments to create a Commits.
     * @example
     * // Create one Commits
     * const Commits = await prisma.commits.create({
     *   data: {
     *     // ... data to create a Commits
     *   }
     * })
     * 
    **/
    create<T extends commitsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, commitsCreateArgs<ExtArgs>>
    ): Prisma__commitsClient<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Commits.
     *     @param {commitsCreateManyArgs} args - Arguments to create many Commits.
     *     @example
     *     // Create many Commits
     *     const commits = await prisma.commits.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commitsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commitsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Commits.
     * @param {commitsDeleteArgs} args - Arguments to delete one Commits.
     * @example
     * // Delete one Commits
     * const Commits = await prisma.commits.delete({
     *   where: {
     *     // ... filter to delete one Commits
     *   }
     * })
     * 
    **/
    delete<T extends commitsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, commitsDeleteArgs<ExtArgs>>
    ): Prisma__commitsClient<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Commits.
     * @param {commitsUpdateArgs} args - Arguments to update one Commits.
     * @example
     * // Update one Commits
     * const commits = await prisma.commits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commitsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, commitsUpdateArgs<ExtArgs>>
    ): Prisma__commitsClient<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Commits.
     * @param {commitsDeleteManyArgs} args - Arguments to filter Commits to delete.
     * @example
     * // Delete a few Commits
     * const { count } = await prisma.commits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commitsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, commitsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commitsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commits
     * const commits = await prisma.commits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commitsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, commitsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Commits.
     * @param {commitsUpsertArgs} args - Arguments to update or create a Commits.
     * @example
     * // Update or create a Commits
     * const commits = await prisma.commits.upsert({
     *   create: {
     *     // ... data to create a Commits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commits we want to update
     *   }
     * })
    **/
    upsert<T extends commitsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, commitsUpsertArgs<ExtArgs>>
    ): Prisma__commitsClient<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Commits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commitsCountArgs} args - Arguments to filter Commits to count.
     * @example
     * // Count the number of Commits
     * const count = await prisma.commits.count({
     *   where: {
     *     // ... the filter for the Commits we want to count
     *   }
     * })
    **/
    count<T extends commitsCountArgs>(
      args?: Subset<T, commitsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommitsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommitsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommitsAggregateArgs>(args: Subset<T, CommitsAggregateArgs>): Prisma.PrismaPromise<GetCommitsAggregateType<T>>

    /**
     * Group by Commits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commitsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends commitsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: commitsGroupByArgs['orderBy'] }
        : { orderBy?: commitsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, commitsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommitsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the commits model
   */
  readonly fields: commitsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for commits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__commitsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    repos<T extends reposDefaultArgs<ExtArgs> = {}>(args?: Subset<T, reposDefaultArgs<ExtArgs>>): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the commits model
   */ 
  interface commitsFieldRefs {
    readonly id: FieldRef<"commits", 'Int'>
    readonly message: FieldRef<"commits", 'String'>
    readonly repoid: FieldRef<"commits", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * commits findUnique
   */
  export type commitsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * Filter, which commits to fetch.
     */
    where: commitsWhereUniqueInput
  }


  /**
   * commits findUniqueOrThrow
   */
  export type commitsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * Filter, which commits to fetch.
     */
    where: commitsWhereUniqueInput
  }


  /**
   * commits findFirst
   */
  export type commitsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * Filter, which commits to fetch.
     */
    where?: commitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commits to fetch.
     */
    orderBy?: commitsOrderByWithRelationInput | commitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commits.
     */
    cursor?: commitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commits.
     */
    distinct?: CommitsScalarFieldEnum | CommitsScalarFieldEnum[]
  }


  /**
   * commits findFirstOrThrow
   */
  export type commitsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * Filter, which commits to fetch.
     */
    where?: commitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commits to fetch.
     */
    orderBy?: commitsOrderByWithRelationInput | commitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for commits.
     */
    cursor?: commitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of commits.
     */
    distinct?: CommitsScalarFieldEnum | CommitsScalarFieldEnum[]
  }


  /**
   * commits findMany
   */
  export type commitsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * Filter, which commits to fetch.
     */
    where?: commitsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of commits to fetch.
     */
    orderBy?: commitsOrderByWithRelationInput | commitsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing commits.
     */
    cursor?: commitsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` commits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` commits.
     */
    skip?: number
    distinct?: CommitsScalarFieldEnum | CommitsScalarFieldEnum[]
  }


  /**
   * commits create
   */
  export type commitsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * The data needed to create a commits.
     */
    data: XOR<commitsCreateInput, commitsUncheckedCreateInput>
  }


  /**
   * commits createMany
   */
  export type commitsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many commits.
     */
    data: commitsCreateManyInput | commitsCreateManyInput[]
  }


  /**
   * commits update
   */
  export type commitsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * The data needed to update a commits.
     */
    data: XOR<commitsUpdateInput, commitsUncheckedUpdateInput>
    /**
     * Choose, which commits to update.
     */
    where: commitsWhereUniqueInput
  }


  /**
   * commits updateMany
   */
  export type commitsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update commits.
     */
    data: XOR<commitsUpdateManyMutationInput, commitsUncheckedUpdateManyInput>
    /**
     * Filter which commits to update
     */
    where?: commitsWhereInput
  }


  /**
   * commits upsert
   */
  export type commitsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * The filter to search for the commits to update in case it exists.
     */
    where: commitsWhereUniqueInput
    /**
     * In case the commits found by the `where` argument doesn't exist, create a new commits with this data.
     */
    create: XOR<commitsCreateInput, commitsUncheckedCreateInput>
    /**
     * In case the commits was found with the provided `where` argument, update it with this data.
     */
    update: XOR<commitsUpdateInput, commitsUncheckedUpdateInput>
  }


  /**
   * commits delete
   */
  export type commitsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    /**
     * Filter which commits to delete.
     */
    where: commitsWhereUniqueInput
  }


  /**
   * commits deleteMany
   */
  export type commitsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which commits to delete
     */
    where?: commitsWhereInput
  }


  /**
   * commits without action
   */
  export type commitsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
  }



  /**
   * Model repos
   */

  export type AggregateRepos = {
    _count: ReposCountAggregateOutputType | null
    _avg: ReposAvgAggregateOutputType | null
    _sum: ReposSumAggregateOutputType | null
    _min: ReposMinAggregateOutputType | null
    _max: ReposMaxAggregateOutputType | null
  }

  export type ReposAvgAggregateOutputType = {
    id: number | null
    authorid: number | null
  }

  export type ReposSumAggregateOutputType = {
    id: number | null
    authorid: number | null
  }

  export type ReposMinAggregateOutputType = {
    id: number | null
    name: string | null
    authorid: number | null
  }

  export type ReposMaxAggregateOutputType = {
    id: number | null
    name: string | null
    authorid: number | null
  }

  export type ReposCountAggregateOutputType = {
    id: number
    name: number
    authorid: number
    _all: number
  }


  export type ReposAvgAggregateInputType = {
    id?: true
    authorid?: true
  }

  export type ReposSumAggregateInputType = {
    id?: true
    authorid?: true
  }

  export type ReposMinAggregateInputType = {
    id?: true
    name?: true
    authorid?: true
  }

  export type ReposMaxAggregateInputType = {
    id?: true
    name?: true
    authorid?: true
  }

  export type ReposCountAggregateInputType = {
    id?: true
    name?: true
    authorid?: true
    _all?: true
  }

  export type ReposAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repos to aggregate.
     */
    where?: reposWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repos to fetch.
     */
    orderBy?: reposOrderByWithRelationInput | reposOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: reposWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned repos
    **/
    _count?: true | ReposCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReposAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReposSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReposMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReposMaxAggregateInputType
  }

  export type GetReposAggregateType<T extends ReposAggregateArgs> = {
        [P in keyof T & keyof AggregateRepos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRepos[P]>
      : GetScalarType<T[P], AggregateRepos[P]>
  }




  export type reposGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: reposWhereInput
    orderBy?: reposOrderByWithAggregationInput | reposOrderByWithAggregationInput[]
    by: ReposScalarFieldEnum[] | ReposScalarFieldEnum
    having?: reposScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReposCountAggregateInputType | true
    _avg?: ReposAvgAggregateInputType
    _sum?: ReposSumAggregateInputType
    _min?: ReposMinAggregateInputType
    _max?: ReposMaxAggregateInputType
  }

  export type ReposGroupByOutputType = {
    id: number
    name: string | null
    authorid: number
    _count: ReposCountAggregateOutputType | null
    _avg: ReposAvgAggregateOutputType | null
    _sum: ReposSumAggregateOutputType | null
    _min: ReposMinAggregateOutputType | null
    _max: ReposMaxAggregateOutputType | null
  }

  type GetReposGroupByPayload<T extends reposGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReposGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReposGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReposGroupByOutputType[P]>
            : GetScalarType<T[P], ReposGroupByOutputType[P]>
        }
      >
    >


  export type reposSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    authorid?: boolean
    commits?: boolean | repos$commitsArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | ReposCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["repos"]>

  export type reposSelectScalar = {
    id?: boolean
    name?: boolean
    authorid?: boolean
  }

  export type reposInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    commits?: boolean | repos$commitsArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | ReposCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $reposPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "repos"
    objects: {
      commits: Prisma.$commitsPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      authorid: number
    }, ExtArgs["result"]["repos"]>
    composites: {}
  }


  type reposGetPayload<S extends boolean | null | undefined | reposDefaultArgs> = $Result.GetResult<Prisma.$reposPayload, S>

  type reposCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<reposFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReposCountAggregateInputType | true
    }

  export interface reposDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['repos'], meta: { name: 'repos' } }
    /**
     * Find zero or one Repos that matches the filter.
     * @param {reposFindUniqueArgs} args - Arguments to find a Repos
     * @example
     * // Get one Repos
     * const repos = await prisma.repos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reposFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, reposFindUniqueArgs<ExtArgs>>
    ): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Repos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {reposFindUniqueOrThrowArgs} args - Arguments to find a Repos
     * @example
     * // Get one Repos
     * const repos = await prisma.repos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reposFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, reposFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Repos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reposFindFirstArgs} args - Arguments to find a Repos
     * @example
     * // Get one Repos
     * const repos = await prisma.repos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reposFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, reposFindFirstArgs<ExtArgs>>
    ): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Repos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reposFindFirstOrThrowArgs} args - Arguments to find a Repos
     * @example
     * // Get one Repos
     * const repos = await prisma.repos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reposFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, reposFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Repos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reposFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Repos
     * const repos = await prisma.repos.findMany()
     * 
     * // Get first 10 Repos
     * const repos = await prisma.repos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reposWithIdOnly = await prisma.repos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends reposFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reposFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Repos.
     * @param {reposCreateArgs} args - Arguments to create a Repos.
     * @example
     * // Create one Repos
     * const Repos = await prisma.repos.create({
     *   data: {
     *     // ... data to create a Repos
     *   }
     * })
     * 
    **/
    create<T extends reposCreateArgs<ExtArgs>>(
      args: SelectSubset<T, reposCreateArgs<ExtArgs>>
    ): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Repos.
     *     @param {reposCreateManyArgs} args - Arguments to create many Repos.
     *     @example
     *     // Create many Repos
     *     const repos = await prisma.repos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reposCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reposCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Repos.
     * @param {reposDeleteArgs} args - Arguments to delete one Repos.
     * @example
     * // Delete one Repos
     * const Repos = await prisma.repos.delete({
     *   where: {
     *     // ... filter to delete one Repos
     *   }
     * })
     * 
    **/
    delete<T extends reposDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, reposDeleteArgs<ExtArgs>>
    ): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Repos.
     * @param {reposUpdateArgs} args - Arguments to update one Repos.
     * @example
     * // Update one Repos
     * const repos = await prisma.repos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reposUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, reposUpdateArgs<ExtArgs>>
    ): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Repos.
     * @param {reposDeleteManyArgs} args - Arguments to filter Repos to delete.
     * @example
     * // Delete a few Repos
     * const { count } = await prisma.repos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reposDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, reposDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Repos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reposUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Repos
     * const repos = await prisma.repos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reposUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, reposUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Repos.
     * @param {reposUpsertArgs} args - Arguments to update or create a Repos.
     * @example
     * // Update or create a Repos
     * const repos = await prisma.repos.upsert({
     *   create: {
     *     // ... data to create a Repos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Repos we want to update
     *   }
     * })
    **/
    upsert<T extends reposUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, reposUpsertArgs<ExtArgs>>
    ): Prisma__reposClient<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Repos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reposCountArgs} args - Arguments to filter Repos to count.
     * @example
     * // Count the number of Repos
     * const count = await prisma.repos.count({
     *   where: {
     *     // ... the filter for the Repos we want to count
     *   }
     * })
    **/
    count<T extends reposCountArgs>(
      args?: Subset<T, reposCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReposCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Repos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReposAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReposAggregateArgs>(args: Subset<T, ReposAggregateArgs>): Prisma.PrismaPromise<GetReposAggregateType<T>>

    /**
     * Group by Repos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reposGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends reposGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: reposGroupByArgs['orderBy'] }
        : { orderBy?: reposGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, reposGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReposGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the repos model
   */
  readonly fields: reposFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for repos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__reposClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    commits<T extends repos$commitsArgs<ExtArgs> = {}>(args?: Subset<T, repos$commitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$commitsPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the repos model
   */ 
  interface reposFieldRefs {
    readonly id: FieldRef<"repos", 'Int'>
    readonly name: FieldRef<"repos", 'String'>
    readonly authorid: FieldRef<"repos", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * repos findUnique
   */
  export type reposFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * Filter, which repos to fetch.
     */
    where: reposWhereUniqueInput
  }


  /**
   * repos findUniqueOrThrow
   */
  export type reposFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * Filter, which repos to fetch.
     */
    where: reposWhereUniqueInput
  }


  /**
   * repos findFirst
   */
  export type reposFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * Filter, which repos to fetch.
     */
    where?: reposWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repos to fetch.
     */
    orderBy?: reposOrderByWithRelationInput | reposOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repos.
     */
    cursor?: reposWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repos.
     */
    distinct?: ReposScalarFieldEnum | ReposScalarFieldEnum[]
  }


  /**
   * repos findFirstOrThrow
   */
  export type reposFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * Filter, which repos to fetch.
     */
    where?: reposWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repos to fetch.
     */
    orderBy?: reposOrderByWithRelationInput | reposOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for repos.
     */
    cursor?: reposWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of repos.
     */
    distinct?: ReposScalarFieldEnum | ReposScalarFieldEnum[]
  }


  /**
   * repos findMany
   */
  export type reposFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * Filter, which repos to fetch.
     */
    where?: reposWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of repos to fetch.
     */
    orderBy?: reposOrderByWithRelationInput | reposOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing repos.
     */
    cursor?: reposWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` repos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` repos.
     */
    skip?: number
    distinct?: ReposScalarFieldEnum | ReposScalarFieldEnum[]
  }


  /**
   * repos create
   */
  export type reposCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * The data needed to create a repos.
     */
    data: XOR<reposCreateInput, reposUncheckedCreateInput>
  }


  /**
   * repos createMany
   */
  export type reposCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many repos.
     */
    data: reposCreateManyInput | reposCreateManyInput[]
  }


  /**
   * repos update
   */
  export type reposUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * The data needed to update a repos.
     */
    data: XOR<reposUpdateInput, reposUncheckedUpdateInput>
    /**
     * Choose, which repos to update.
     */
    where: reposWhereUniqueInput
  }


  /**
   * repos updateMany
   */
  export type reposUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update repos.
     */
    data: XOR<reposUpdateManyMutationInput, reposUncheckedUpdateManyInput>
    /**
     * Filter which repos to update
     */
    where?: reposWhereInput
  }


  /**
   * repos upsert
   */
  export type reposUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * The filter to search for the repos to update in case it exists.
     */
    where: reposWhereUniqueInput
    /**
     * In case the repos found by the `where` argument doesn't exist, create a new repos with this data.
     */
    create: XOR<reposCreateInput, reposUncheckedCreateInput>
    /**
     * In case the repos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<reposUpdateInput, reposUncheckedUpdateInput>
  }


  /**
   * repos delete
   */
  export type reposDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    /**
     * Filter which repos to delete.
     */
    where: reposWhereUniqueInput
  }


  /**
   * repos deleteMany
   */
  export type reposDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which repos to delete
     */
    where?: reposWhereInput
  }


  /**
   * repos.commits
   */
  export type repos$commitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the commits
     */
    select?: commitsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: commitsInclude<ExtArgs> | null
    where?: commitsWhereInput
    orderBy?: commitsOrderByWithRelationInput | commitsOrderByWithRelationInput[]
    cursor?: commitsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommitsScalarFieldEnum | CommitsScalarFieldEnum[]
  }


  /**
   * repos without action
   */
  export type reposDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
  }



  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    email: string | null
    role: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    email: string | null
    role: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    username: number
    password: number
    email: number
    role: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    role?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    role?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    email?: true
    role?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    username: string
    password: string
    email: string
    role: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    role?: boolean
    repos?: boolean | users$reposArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    role?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repos?: boolean | users$reposArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      repos: Prisma.$reposPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      email: string
      role: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    repos<T extends users$reposArgs<ExtArgs> = {}>(args?: Subset<T, users$reposArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$reposPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.repos
   */
  export type users$reposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the repos
     */
    select?: reposSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: reposInclude<ExtArgs> | null
    where?: reposWhereInput
    orderBy?: reposOrderByWithRelationInput | reposOrderByWithRelationInput[]
    cursor?: reposWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReposScalarFieldEnum | ReposScalarFieldEnum[]
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CommitsScalarFieldEnum: {
    id: 'id',
    message: 'message',
    repoid: 'repoid'
  };

  export type CommitsScalarFieldEnum = (typeof CommitsScalarFieldEnum)[keyof typeof CommitsScalarFieldEnum]


  export const ReposScalarFieldEnum: {
    id: 'id',
    name: 'name',
    authorid: 'authorid'
  };

  export type ReposScalarFieldEnum = (typeof ReposScalarFieldEnum)[keyof typeof ReposScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    email: 'email',
    role: 'role'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type commitsWhereInput = {
    AND?: commitsWhereInput | commitsWhereInput[]
    OR?: commitsWhereInput[]
    NOT?: commitsWhereInput | commitsWhereInput[]
    id?: IntFilter<"commits"> | number
    message?: StringNullableFilter<"commits"> | string | null
    repoid?: IntFilter<"commits"> | number
    repos?: XOR<ReposRelationFilter, reposWhereInput>
  }

  export type commitsOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrderInput | SortOrder
    repoid?: SortOrder
    repos?: reposOrderByWithRelationInput
  }

  export type commitsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: commitsWhereInput | commitsWhereInput[]
    OR?: commitsWhereInput[]
    NOT?: commitsWhereInput | commitsWhereInput[]
    message?: StringNullableFilter<"commits"> | string | null
    repoid?: IntFilter<"commits"> | number
    repos?: XOR<ReposRelationFilter, reposWhereInput>
  }, "id">

  export type commitsOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrderInput | SortOrder
    repoid?: SortOrder
    _count?: commitsCountOrderByAggregateInput
    _avg?: commitsAvgOrderByAggregateInput
    _max?: commitsMaxOrderByAggregateInput
    _min?: commitsMinOrderByAggregateInput
    _sum?: commitsSumOrderByAggregateInput
  }

  export type commitsScalarWhereWithAggregatesInput = {
    AND?: commitsScalarWhereWithAggregatesInput | commitsScalarWhereWithAggregatesInput[]
    OR?: commitsScalarWhereWithAggregatesInput[]
    NOT?: commitsScalarWhereWithAggregatesInput | commitsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"commits"> | number
    message?: StringNullableWithAggregatesFilter<"commits"> | string | null
    repoid?: IntWithAggregatesFilter<"commits"> | number
  }

  export type reposWhereInput = {
    AND?: reposWhereInput | reposWhereInput[]
    OR?: reposWhereInput[]
    NOT?: reposWhereInput | reposWhereInput[]
    id?: IntFilter<"repos"> | number
    name?: StringNullableFilter<"repos"> | string | null
    authorid?: IntFilter<"repos"> | number
    commits?: CommitsListRelationFilter
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type reposOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    authorid?: SortOrder
    commits?: commitsOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
  }

  export type reposWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: reposWhereInput | reposWhereInput[]
    OR?: reposWhereInput[]
    NOT?: reposWhereInput | reposWhereInput[]
    name?: StringNullableFilter<"repos"> | string | null
    authorid?: IntFilter<"repos"> | number
    commits?: CommitsListRelationFilter
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "id">

  export type reposOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    authorid?: SortOrder
    _count?: reposCountOrderByAggregateInput
    _avg?: reposAvgOrderByAggregateInput
    _max?: reposMaxOrderByAggregateInput
    _min?: reposMinOrderByAggregateInput
    _sum?: reposSumOrderByAggregateInput
  }

  export type reposScalarWhereWithAggregatesInput = {
    AND?: reposScalarWhereWithAggregatesInput | reposScalarWhereWithAggregatesInput[]
    OR?: reposScalarWhereWithAggregatesInput[]
    NOT?: reposScalarWhereWithAggregatesInput | reposScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"repos"> | number
    name?: StringNullableWithAggregatesFilter<"repos"> | string | null
    authorid?: IntWithAggregatesFilter<"repos"> | number
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    repos?: ReposListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    repos?: reposOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    username?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    repos?: ReposListRelationFilter
  }, "id">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    role?: StringWithAggregatesFilter<"users"> | string
  }

  export type commitsCreateInput = {
    message?: string | null
    repos: reposCreateNestedOneWithoutCommitsInput
  }

  export type commitsUncheckedCreateInput = {
    id?: number
    message?: string | null
    repoid: number
  }

  export type commitsUpdateInput = {
    message?: NullableStringFieldUpdateOperationsInput | string | null
    repos?: reposUpdateOneRequiredWithoutCommitsNestedInput
  }

  export type commitsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    repoid?: IntFieldUpdateOperationsInput | number
  }

  export type commitsCreateManyInput = {
    message?: string | null
    repoid: number
  }

  export type commitsUpdateManyMutationInput = {
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commitsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
    repoid?: IntFieldUpdateOperationsInput | number
  }

  export type reposCreateInput = {
    name?: string | null
    commits?: commitsCreateNestedManyWithoutReposInput
    users: usersCreateNestedOneWithoutReposInput
  }

  export type reposUncheckedCreateInput = {
    id?: number
    name?: string | null
    authorid: number
    commits?: commitsUncheckedCreateNestedManyWithoutReposInput
  }

  export type reposUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    commits?: commitsUpdateManyWithoutReposNestedInput
    users?: usersUpdateOneRequiredWithoutReposNestedInput
  }

  export type reposUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    authorid?: IntFieldUpdateOperationsInput | number
    commits?: commitsUncheckedUpdateManyWithoutReposNestedInput
  }

  export type reposCreateManyInput = {
    name?: string | null
    authorid: number
  }

  export type reposUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reposUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    authorid?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateInput = {
    username: string
    password: string
    email: string
    role: string
    repos?: reposCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    email: string
    role: string
    repos?: reposUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    repos?: reposUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    repos?: reposUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    username: string
    password: string
    email: string
    role: string
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ReposRelationFilter = {
    is?: reposWhereInput
    isNot?: reposWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type commitsCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    repoid?: SortOrder
  }

  export type commitsAvgOrderByAggregateInput = {
    id?: SortOrder
    repoid?: SortOrder
  }

  export type commitsMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    repoid?: SortOrder
  }

  export type commitsMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    repoid?: SortOrder
  }

  export type commitsSumOrderByAggregateInput = {
    id?: SortOrder
    repoid?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CommitsListRelationFilter = {
    every?: commitsWhereInput
    some?: commitsWhereInput
    none?: commitsWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type commitsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reposCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    authorid?: SortOrder
  }

  export type reposAvgOrderByAggregateInput = {
    id?: SortOrder
    authorid?: SortOrder
  }

  export type reposMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    authorid?: SortOrder
  }

  export type reposMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    authorid?: SortOrder
  }

  export type reposSumOrderByAggregateInput = {
    id?: SortOrder
    authorid?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ReposListRelationFilter = {
    every?: reposWhereInput
    some?: reposWhereInput
    none?: reposWhereInput
  }

  export type reposOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    role?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type reposCreateNestedOneWithoutCommitsInput = {
    create?: XOR<reposCreateWithoutCommitsInput, reposUncheckedCreateWithoutCommitsInput>
    connectOrCreate?: reposCreateOrConnectWithoutCommitsInput
    connect?: reposWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type reposUpdateOneRequiredWithoutCommitsNestedInput = {
    create?: XOR<reposCreateWithoutCommitsInput, reposUncheckedCreateWithoutCommitsInput>
    connectOrCreate?: reposCreateOrConnectWithoutCommitsInput
    upsert?: reposUpsertWithoutCommitsInput
    connect?: reposWhereUniqueInput
    update?: XOR<XOR<reposUpdateToOneWithWhereWithoutCommitsInput, reposUpdateWithoutCommitsInput>, reposUncheckedUpdateWithoutCommitsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type commitsCreateNestedManyWithoutReposInput = {
    create?: XOR<commitsCreateWithoutReposInput, commitsUncheckedCreateWithoutReposInput> | commitsCreateWithoutReposInput[] | commitsUncheckedCreateWithoutReposInput[]
    connectOrCreate?: commitsCreateOrConnectWithoutReposInput | commitsCreateOrConnectWithoutReposInput[]
    createMany?: commitsCreateManyReposInputEnvelope
    connect?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutReposInput = {
    create?: XOR<usersCreateWithoutReposInput, usersUncheckedCreateWithoutReposInput>
    connectOrCreate?: usersCreateOrConnectWithoutReposInput
    connect?: usersWhereUniqueInput
  }

  export type commitsUncheckedCreateNestedManyWithoutReposInput = {
    create?: XOR<commitsCreateWithoutReposInput, commitsUncheckedCreateWithoutReposInput> | commitsCreateWithoutReposInput[] | commitsUncheckedCreateWithoutReposInput[]
    connectOrCreate?: commitsCreateOrConnectWithoutReposInput | commitsCreateOrConnectWithoutReposInput[]
    createMany?: commitsCreateManyReposInputEnvelope
    connect?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
  }

  export type commitsUpdateManyWithoutReposNestedInput = {
    create?: XOR<commitsCreateWithoutReposInput, commitsUncheckedCreateWithoutReposInput> | commitsCreateWithoutReposInput[] | commitsUncheckedCreateWithoutReposInput[]
    connectOrCreate?: commitsCreateOrConnectWithoutReposInput | commitsCreateOrConnectWithoutReposInput[]
    upsert?: commitsUpsertWithWhereUniqueWithoutReposInput | commitsUpsertWithWhereUniqueWithoutReposInput[]
    createMany?: commitsCreateManyReposInputEnvelope
    set?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
    disconnect?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
    delete?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
    connect?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
    update?: commitsUpdateWithWhereUniqueWithoutReposInput | commitsUpdateWithWhereUniqueWithoutReposInput[]
    updateMany?: commitsUpdateManyWithWhereWithoutReposInput | commitsUpdateManyWithWhereWithoutReposInput[]
    deleteMany?: commitsScalarWhereInput | commitsScalarWhereInput[]
  }

  export type usersUpdateOneRequiredWithoutReposNestedInput = {
    create?: XOR<usersCreateWithoutReposInput, usersUncheckedCreateWithoutReposInput>
    connectOrCreate?: usersCreateOrConnectWithoutReposInput
    upsert?: usersUpsertWithoutReposInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutReposInput, usersUpdateWithoutReposInput>, usersUncheckedUpdateWithoutReposInput>
  }

  export type commitsUncheckedUpdateManyWithoutReposNestedInput = {
    create?: XOR<commitsCreateWithoutReposInput, commitsUncheckedCreateWithoutReposInput> | commitsCreateWithoutReposInput[] | commitsUncheckedCreateWithoutReposInput[]
    connectOrCreate?: commitsCreateOrConnectWithoutReposInput | commitsCreateOrConnectWithoutReposInput[]
    upsert?: commitsUpsertWithWhereUniqueWithoutReposInput | commitsUpsertWithWhereUniqueWithoutReposInput[]
    createMany?: commitsCreateManyReposInputEnvelope
    set?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
    disconnect?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
    delete?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
    connect?: commitsWhereUniqueInput | commitsWhereUniqueInput[]
    update?: commitsUpdateWithWhereUniqueWithoutReposInput | commitsUpdateWithWhereUniqueWithoutReposInput[]
    updateMany?: commitsUpdateManyWithWhereWithoutReposInput | commitsUpdateManyWithWhereWithoutReposInput[]
    deleteMany?: commitsScalarWhereInput | commitsScalarWhereInput[]
  }

  export type reposCreateNestedManyWithoutUsersInput = {
    create?: XOR<reposCreateWithoutUsersInput, reposUncheckedCreateWithoutUsersInput> | reposCreateWithoutUsersInput[] | reposUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reposCreateOrConnectWithoutUsersInput | reposCreateOrConnectWithoutUsersInput[]
    createMany?: reposCreateManyUsersInputEnvelope
    connect?: reposWhereUniqueInput | reposWhereUniqueInput[]
  }

  export type reposUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<reposCreateWithoutUsersInput, reposUncheckedCreateWithoutUsersInput> | reposCreateWithoutUsersInput[] | reposUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reposCreateOrConnectWithoutUsersInput | reposCreateOrConnectWithoutUsersInput[]
    createMany?: reposCreateManyUsersInputEnvelope
    connect?: reposWhereUniqueInput | reposWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type reposUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reposCreateWithoutUsersInput, reposUncheckedCreateWithoutUsersInput> | reposCreateWithoutUsersInput[] | reposUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reposCreateOrConnectWithoutUsersInput | reposCreateOrConnectWithoutUsersInput[]
    upsert?: reposUpsertWithWhereUniqueWithoutUsersInput | reposUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reposCreateManyUsersInputEnvelope
    set?: reposWhereUniqueInput | reposWhereUniqueInput[]
    disconnect?: reposWhereUniqueInput | reposWhereUniqueInput[]
    delete?: reposWhereUniqueInput | reposWhereUniqueInput[]
    connect?: reposWhereUniqueInput | reposWhereUniqueInput[]
    update?: reposUpdateWithWhereUniqueWithoutUsersInput | reposUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reposUpdateManyWithWhereWithoutUsersInput | reposUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reposScalarWhereInput | reposScalarWhereInput[]
  }

  export type reposUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<reposCreateWithoutUsersInput, reposUncheckedCreateWithoutUsersInput> | reposCreateWithoutUsersInput[] | reposUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: reposCreateOrConnectWithoutUsersInput | reposCreateOrConnectWithoutUsersInput[]
    upsert?: reposUpsertWithWhereUniqueWithoutUsersInput | reposUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: reposCreateManyUsersInputEnvelope
    set?: reposWhereUniqueInput | reposWhereUniqueInput[]
    disconnect?: reposWhereUniqueInput | reposWhereUniqueInput[]
    delete?: reposWhereUniqueInput | reposWhereUniqueInput[]
    connect?: reposWhereUniqueInput | reposWhereUniqueInput[]
    update?: reposUpdateWithWhereUniqueWithoutUsersInput | reposUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: reposUpdateManyWithWhereWithoutUsersInput | reposUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: reposScalarWhereInput | reposScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type reposCreateWithoutCommitsInput = {
    name?: string | null
    users: usersCreateNestedOneWithoutReposInput
  }

  export type reposUncheckedCreateWithoutCommitsInput = {
    id?: number
    name?: string | null
    authorid: number
  }

  export type reposCreateOrConnectWithoutCommitsInput = {
    where: reposWhereUniqueInput
    create: XOR<reposCreateWithoutCommitsInput, reposUncheckedCreateWithoutCommitsInput>
  }

  export type reposUpsertWithoutCommitsInput = {
    update: XOR<reposUpdateWithoutCommitsInput, reposUncheckedUpdateWithoutCommitsInput>
    create: XOR<reposCreateWithoutCommitsInput, reposUncheckedCreateWithoutCommitsInput>
    where?: reposWhereInput
  }

  export type reposUpdateToOneWithWhereWithoutCommitsInput = {
    where?: reposWhereInput
    data: XOR<reposUpdateWithoutCommitsInput, reposUncheckedUpdateWithoutCommitsInput>
  }

  export type reposUpdateWithoutCommitsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneRequiredWithoutReposNestedInput
  }

  export type reposUncheckedUpdateWithoutCommitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    authorid?: IntFieldUpdateOperationsInput | number
  }

  export type commitsCreateWithoutReposInput = {
    message?: string | null
  }

  export type commitsUncheckedCreateWithoutReposInput = {
    id?: number
    message?: string | null
  }

  export type commitsCreateOrConnectWithoutReposInput = {
    where: commitsWhereUniqueInput
    create: XOR<commitsCreateWithoutReposInput, commitsUncheckedCreateWithoutReposInput>
  }

  export type commitsCreateManyReposInputEnvelope = {
    data: commitsCreateManyReposInput | commitsCreateManyReposInput[]
  }

  export type usersCreateWithoutReposInput = {
    username: string
    password: string
    email: string
    role: string
  }

  export type usersUncheckedCreateWithoutReposInput = {
    id?: number
    username: string
    password: string
    email: string
    role: string
  }

  export type usersCreateOrConnectWithoutReposInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutReposInput, usersUncheckedCreateWithoutReposInput>
  }

  export type commitsUpsertWithWhereUniqueWithoutReposInput = {
    where: commitsWhereUniqueInput
    update: XOR<commitsUpdateWithoutReposInput, commitsUncheckedUpdateWithoutReposInput>
    create: XOR<commitsCreateWithoutReposInput, commitsUncheckedCreateWithoutReposInput>
  }

  export type commitsUpdateWithWhereUniqueWithoutReposInput = {
    where: commitsWhereUniqueInput
    data: XOR<commitsUpdateWithoutReposInput, commitsUncheckedUpdateWithoutReposInput>
  }

  export type commitsUpdateManyWithWhereWithoutReposInput = {
    where: commitsScalarWhereInput
    data: XOR<commitsUpdateManyMutationInput, commitsUncheckedUpdateManyWithoutReposInput>
  }

  export type commitsScalarWhereInput = {
    AND?: commitsScalarWhereInput | commitsScalarWhereInput[]
    OR?: commitsScalarWhereInput[]
    NOT?: commitsScalarWhereInput | commitsScalarWhereInput[]
    id?: IntFilter<"commits"> | number
    message?: StringNullableFilter<"commits"> | string | null
    repoid?: IntFilter<"commits"> | number
  }

  export type usersUpsertWithoutReposInput = {
    update: XOR<usersUpdateWithoutReposInput, usersUncheckedUpdateWithoutReposInput>
    create: XOR<usersCreateWithoutReposInput, usersUncheckedCreateWithoutReposInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutReposInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutReposInput, usersUncheckedUpdateWithoutReposInput>
  }

  export type usersUpdateWithoutReposInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateWithoutReposInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
  }

  export type reposCreateWithoutUsersInput = {
    name?: string | null
    commits?: commitsCreateNestedManyWithoutReposInput
  }

  export type reposUncheckedCreateWithoutUsersInput = {
    id?: number
    name?: string | null
    commits?: commitsUncheckedCreateNestedManyWithoutReposInput
  }

  export type reposCreateOrConnectWithoutUsersInput = {
    where: reposWhereUniqueInput
    create: XOR<reposCreateWithoutUsersInput, reposUncheckedCreateWithoutUsersInput>
  }

  export type reposCreateManyUsersInputEnvelope = {
    data: reposCreateManyUsersInput | reposCreateManyUsersInput[]
  }

  export type reposUpsertWithWhereUniqueWithoutUsersInput = {
    where: reposWhereUniqueInput
    update: XOR<reposUpdateWithoutUsersInput, reposUncheckedUpdateWithoutUsersInput>
    create: XOR<reposCreateWithoutUsersInput, reposUncheckedCreateWithoutUsersInput>
  }

  export type reposUpdateWithWhereUniqueWithoutUsersInput = {
    where: reposWhereUniqueInput
    data: XOR<reposUpdateWithoutUsersInput, reposUncheckedUpdateWithoutUsersInput>
  }

  export type reposUpdateManyWithWhereWithoutUsersInput = {
    where: reposScalarWhereInput
    data: XOR<reposUpdateManyMutationInput, reposUncheckedUpdateManyWithoutUsersInput>
  }

  export type reposScalarWhereInput = {
    AND?: reposScalarWhereInput | reposScalarWhereInput[]
    OR?: reposScalarWhereInput[]
    NOT?: reposScalarWhereInput | reposScalarWhereInput[]
    id?: IntFilter<"repos"> | number
    name?: StringNullableFilter<"repos"> | string | null
    authorid?: IntFilter<"repos"> | number
  }

  export type commitsCreateManyReposInput = {
    message?: string | null
  }

  export type commitsUpdateWithoutReposInput = {
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commitsUncheckedUpdateWithoutReposInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commitsUncheckedUpdateManyWithoutReposInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reposCreateManyUsersInput = {
    name?: string | null
  }

  export type reposUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    commits?: commitsUpdateManyWithoutReposNestedInput
  }

  export type reposUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    commits?: commitsUncheckedUpdateManyWithoutReposNestedInput
  }

  export type reposUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ReposCountOutputTypeDefaultArgs instead
     */
    export type ReposCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReposCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use commitsDefaultArgs instead
     */
    export type commitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = commitsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use reposDefaultArgs instead
     */
    export type reposArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = reposDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}